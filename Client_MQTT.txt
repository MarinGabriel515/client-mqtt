from tkinter import *
import socket
import threading

CONNECT = 0x10
CONNACK = 0x20
PUBLISH = 0x30
PUBACK = 0x40
PUBREC = 0x50
PUBREL = 0x60
PUBCOMP = 0x70
SUBSCRIBE = 0x82
SUBACK = 0x90
UNSUBSCRIBE = 0xA2
UNSUBACK = 0xB0
PINGREQ = 0xC0
PINGRESP = 0xD0
DISCONNECT = 0xE0

class Client:

    host="127.0.0.1"
    port=1883

    def __init__(self,root,nume):

        self.nume=nume
        self.root=root
        self.master=Toplevel(self.root)
        self.master.title(self.nume)
        self.user=""
        self.parola=""
        self.socket=socket.socket()
        self.TextBox=Text(self.master, fg="red", bg="white")


    def KeepAlive(self):

        packPINGREQ = PINGREQ.to_bytes(1,byteorder='big')
        packPINGREQ += (0).to_bytes(1,byteorder='big')

        try:
            self.socket.send(packPINGREQ)
        except:
            print("Exceptie la KeepAlive send")

        try:
            packPINGRESP=self.socket.recv(1024)
            if packPINGRESP[0]==PINGRESP:
                print("Conectiune Stabila")
        except:
            print("Exceptie la KeepAlive recv")

        timer = threading.Timer(60.0, self.KeepAlive)
        timer.start()

    def printRecv(self):

        R=self.socket.recv(1024)
        if R:

            R=R[4:]
            R=R.decode()
            self.TextBox.insert('1.0',R+"  \n")

            timer1 = threading.Timer(1.0, self.printRecv)
            timer1.start()


    def publish(self,PubET,PubEI):

        Topic=PubET.get()
        Info=PubEI.get()

        packPUBL=PUBLISH.to_bytes(1, byteorder='big')+(2+len(Topic)+len(Info)).to_bytes(1,byteorder='big')+(len(Topic)).to_bytes(2,byteorder='big')
        packPUBL+=Topic.encode()
        packPUBL+=Info.encode()

        self.socket.send(packPUBL)

    def subscribe(self,SubET,SubEQ):

        Topic=SubET.get()
        QOS=SubEQ.get()

        packSUB = SUBSCRIBE.to_bytes(1, byteorder='big')+(5+len(Topic)).to_bytes(1,byteorder='big')+(1).to_bytes(2,byteorder='big')
        packSUB += (len(Topic)).to_bytes(2,byteorder='big')+Topic.encode()+(0).to_bytes(1,byteorder='big')

        try:
            self.socket.send(packSUB)
        except socket.error as msg:
            print("Exceptie socket")


    def disconnect(self):

        packDISC=DISCONNECT.to_bytes(1, byteorder='big')+(0).to_bytes(1, byteorder='big')

        try:
            self.socket.send(packDISC)
        except socket.error as msg:
            print("Exceptie socket")
        self.master.destroy()

    def unsubscribe(self,SubET):

        Topic=SubET.get()

        packUNS=UNSUBSCRIBE.to_bytes(1, byteorder='big')+(4+len(Topic)).to_bytes(1,byteorder='big')+(0).to_bytes(1, byteorder='big')+(1).to_bytes(1, byteorder='big')
        packUNS+=(0).to_bytes(1, byteorder='big')+(len(Topic)).to_bytes(1, byteorder='big')+Topic.encode()

        try:
            self.socket.send(packUNS)
        except socket.error as msg:
            print("Exceptie socket")

    def ThreeWayHandshake(self,UserPass):

        PackCONN = CONNECT.to_bytes(1, byteorder='big') + ((12 + len(UserPass)).to_bytes(1, byteorder='big'))
        PackCONN += (4).to_bytes(2, byteorder='big')
        PackCONN += "MQTT".encode()
        PackCONN += (4).to_bytes(1, byteorder='big')
        PackCONN += (2).to_bytes(1, byteorder='big')
        PackCONN += (120).to_bytes(2, byteorder='big')
        PackCONN += len(UserPass).to_bytes(2, byteorder='big')
        PackCONN += UserPass.encode()

        self.socket.send(PackCONN)

        PackCONAK=self.socket.recv(1024)
        if PackCONAK[0]==CONNACK:
            print("Handshake reusit")




    def connect(self,UserE,PassE):
        try:

            self.socket.connect((self.host,self.port))
            self.user=UserE.get()
            self.parola=PassE.get()

            UserPass=self.user+"/"+self.parola

            self.ThreeWayHandshake(UserPass)

        except:

            print("Exceptie connect")

        self.master.destroy()
        self.master=Toplevel(self.root)
        self.master.title("Interfata "+self.nume)

        frameM = Frame(self.master)
        frameM.pack(side=TOP)

        frame1 = Frame(frameM)
        frame1.pack(side=LEFT)

        Label(frame1, text="Topic ").grid(row=0, column=0)
        Label(frame1, text="Info ").grid(row=1, column=0)

        PubEI = Entry(frame1)
        PubET = Entry(frame1)

        PubET.grid(row=0, column=1)
        PubEI.grid(row=1,column=1)

        BPublish=Button(frame1,text="Publish", command=lambda: self.publish(PubET,PubEI)).grid(row=2, column=0)

        frame2 = Frame(frameM)
        frame2.pack(side=RIGHT)

        frame3 = Frame(self.master)
        frame3.pack(side=BOTTOM)

        Label(frame2, text="Topic ").grid(row=0, column=0)
        Label(frame2, text="QOS ").grid(row=1, column=0)

        SubET = Entry(frame2)
        SubEQ = Entry(frame2)

        SubET.grid(row=0,column=1)
        SubEQ.grid(row=1,column=1)

        BSubscribe=Button(frame2,text="Subscribe",command=lambda: self.subscribe(SubET,SubEQ)).grid(row=2,column=0)
        BDisconnect = Button(frame2, text="Disconnect", command=lambda: self.disconnect()).grid(row=2,column=1)
        BUnsubscribe = Button(frame2, text="Unsubscribe", command=lambda: self.unsubscribe(SubET)).grid(row=2,column=2)

        self.TextBox = Text(frame3, fg="red", bg="white")
        self.TextBox.pack()


        timer2 = threading.Timer(1.0, self.KeepAlive)
        timer2.start()

        timer3 = threading.Timer(1.0, self.printRecv)
        timer3.start()

    def autentificare(self):


        frame1=Frame(self.master)
        frame1.pack()

        Label(frame1,text="User").grid(row=0,column=0)
        Label(frame1,text="Parola").grid(row=1,column=0)

        UserE=Entry(frame1)
        UserE.grid(row=0,column=1)
        PassE=Entry(frame1)
        PassE.grid(row=1,column=1)

        BConn = Button(frame1,text="Connect",command=lambda: self.connect(UserE,PassE)).grid(row=2,column=0)
        BQuit = Button(frame1, text="Quit",command=self.master.destroy).grid(row=2, column=1)



root=Tk()

c1=Client(root,"C1")
c2=Client(root,"C2")

c1.autentificare()
c2.autentificare()

c1.KeepAlive()
c2.KeepAlive()

root.mainloop()
